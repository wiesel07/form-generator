package ${packageName}.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;

import cn.com.bosssoft.egov.asset.common.entity.CommonResp;
import cn.com.bosssoft.egov.asset.common.entity.PageResp;
import cn.com.bosssoft.egov.asset.common.util.BeanUtilsExt;
import cn.com.bosssoft.egov.asset.common.util.CollectionUtilsExt;
import cn.com.bosssoft.egov.asset.common.util.ObjectUtilsExt;
import ${packageName}.upms.biz.common.exception.UpmsError;
import ${packageName}.common.exception.UpmsException;
import ${packageName}.common.constant.UpmsUrlConstant;
import ${packageName}.controller.req.${capitalEntityPageReqName};
import ${packageName}.controller.req.${capitalEntityReqName};
import ${packageName}.entity.${capitalEntityName};
import ${packageName}.service.${capitalServiceName};
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 *
 * @ClassName 类名：${capitalControllerName}
 * @Description 功能说明： ${comments} 前端控制器
 *              <p>
 *              TODO
 *              </p>
 ***********************************************************************
 * @date 创建日期：${createDate}
 * @author 创建人：${author}
 * @version 版本号：V1.0
 *          <p>
 ****************************修订记录************************************
 * 
 *          ${createDate} ${author} 创建该类功能。
 *
 ***********************************************************************
 *          </p>
 */ 
@Api(tags = "${comments}")
@RestController
@RequestMapping("#if(${moduleName}!='' )/${moduleName}#end/${path}")
public class ${capitalControllerName} { 
    
    @Autowired
	private ${capitalServiceName} ${serviceImplName};

	@ApiOperation(value = "获取列表(分页)", notes = "获取列表(分页)")
	@GetMapping(UpmsUrlConstant.QUERY_PAGE)
	public CommonResp<PageResp<${capitalEntityName}>> queryPages(@Valid  ${capitalEntityPageReqName} ${entityPageReqName}) {

		Page<${capitalEntityName}> page = new Page<>(${entityPageReqName}.getPageNo(), ${entityPageReqName}.getPageSize());

		${capitalEntityName} ${entityName} = new ${capitalEntityName}();
		BeanUtilsExt.copyProperties(${entityPageReqName}, ${entityName});
		EntityWrapper<${capitalEntityName}> wrapper = new EntityWrapper<>(${entityName});
		page = ${serviceImplName}.selectPage(page, wrapper);

		PageResp<${capitalEntityName}> pageResp = new PageResp<${capitalEntityName}>();
		pageResp.setRows(page.getRecords());
		pageResp.setTotal(page.getTotal());
		return new CommonResp<PageResp<${capitalEntityName}>>(pageResp);
	}

	@GetMapping(UpmsUrlConstant.DETAIL)
	@ApiOperation(value = "查询 ${comments}", notes = "查询 ${comments}")
	public CommonResp<${capitalEntityName}> query(@ApiParam(name="id",value="ID",required=true) String id) {
		
		${capitalEntityName} ${entityName} = new ${capitalEntityName}();
		if (ObjectUtilsExt.isNull(${entityName})) {
			throw new UpmsException(UpmsError.NOTICE_IS_NOTEXIST);
		}
		return new CommonResp<${capitalEntityName}>(${entityName});
	}


	@ApiOperation(value = "新增", notes = "新增")
	@PostMapping(UpmsUrlConstant.CREATE)
	public CommonResp<String> create(@Valid @RequestBody ${capitalEntityReqName} ${entityReqName}) {

		${capitalEntityName} ${entityName} = new ${capitalEntityName}();
		BeanUtilsExt.copyProperties(${entityReqName}, ${entityName});
		${serviceImplName}.insert(${entityName});
		return new CommonResp<>();
	}

	@ApiOperation(value = "修改", notes = "修改")
	@PostMapping(UpmsUrlConstant.UPDATE)
	public CommonResp<String> update(@Valid @RequestBody ${capitalEntityReqName} ${entityReqName}) {

		${capitalEntityName} ${entityName} = new ${capitalEntityName}();
		BeanUtilsExt.copyProperties(${entityReqName}, ${entityName});
		
		if (!${serviceImplName}.updateById(${entityName}))) {
			throw new UpmsException(UpmsError.DICT_SQL_UPDATE_ERROR);
		}
		
		return new CommonResp<>();
	}

	@ApiOperation(value = "删除", notes = "删除")
	@PostMapping(UpmsUrlConstant.DELETE)
	public CommonResp<String> delete(@ApiParam(name="id",value="ID",required=true) String id) {
		if (ObjectUtilsExt.isNull(${serviceImplName}.selectById(id))) {
			throw new UpmsException(UpmsError.DICT_IS_NOTEXIST);
		}

		if (!${serviceImplName}.deleteById(id)) {
			throw new UpmsException(UpmsError.DICT_SQL_DELETE_ERROR);
		}
		return new CommonResp<>();

	}

	@ApiOperation(value = "批量删除", notes = "批量删除")
	@PostMapping(UpmsUrlConstant.BATCH_DELETE)
	public CommonResp<String> batchDelete( @ApiParam(name="idS",value="ID数组",required=true) @RequestParam("ids[]") String[] ids) {

		if (ids == null || ids.length <= 0) {
			throw new UpmsException(UpmsError.CHECK_NOT_READABLE);
		}

		if (!${serviceImplName}.deleteBatchIds(CollectionUtilsExt.newArrayList(ids))) {
			throw new UpmsException(UpmsError.DICT_SQL_DELETE_ERROR);
		}
		return new CommonResp<>();
	}

}
